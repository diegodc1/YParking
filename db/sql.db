===================================TABELA CHECKIN===================================================

-- DROP TABLE IF EXISTS public.checkin;

CREATE TABLE IF NOT EXISTS public.checkin
(
    ckin_id integer NOT NULL DEFAULT nextval('checkin_ckin_id_seq'::regclass),
    ckin_vehicle_id integer NOT NULL,
    ckin_client_id integer NOT NULL,
    ckin_section_id integer NOT NULL,
    ckin_time time without time zone NOT NULL,
    ckin_user_id integer NOT NULL,
    ckin_date date,
    ckin_status character varying COLLATE pg_catalog."default",
    ckin_cancel_reason character varying COLLATE pg_catalog."default",
    CONSTRAINT checkin_pkey PRIMARY KEY (ckin_id),
    CONSTRAINT checkin_ckin_client_id_fkey FOREIGN KEY (ckin_client_id)
        REFERENCES public.clients (client_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT checkin_ckin_section_id_fkey FOREIGN KEY (ckin_section_id)
        REFERENCES public.parking_sections (prk_sect_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT checkin_ckin_user_id_fkey FOREIGN KEY (ckin_user_id)
        REFERENCES public.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT checkin_ckin_vehicle_id_fkey FOREIGN KEY (ckin_vehicle_id)
        REFERENCES public.vehicles (vehicle_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.checkin
    OWNER to postgres;










===================================TABELA CHECKOUT===================================================
-- DROP TABLE IF EXISTS public.checkout;

CREATE TABLE IF NOT EXISTS public.checkout
(
    ckout_id integer NOT NULL DEFAULT nextval('checkout_ckout_id_seq'::regclass),
    ckout_vehicle_id integer NOT NULL,
    ckout_client_id integer NOT NULL,
    ckout_section_id integer NOT NULL,
    ckout_time time without time zone NOT NULL,
    ckout_user_id integer NOT NULL,
    ckout_date date NOT NULL,
    ckout_status character varying COLLATE pg_catalog."default",
    ckout_ckin_time time with time zone,
    ckout_ckin_date date,
    ckout_ckin_id integer,
    CONSTRAINT checkout_pkey PRIMARY KEY (ckout_id),
    CONSTRAINT checkout_ckout_client_id_fkey FOREIGN KEY (ckout_client_id)
        REFERENCES public.clients (client_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT checkout_ckout_section_id_fkey FOREIGN KEY (ckout_section_id)
        REFERENCES public.parking_sections (prk_sect_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT checkout_ckout_user_id_fkey FOREIGN KEY (ckout_user_id)
        REFERENCES public.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT checkout_ckout_vehicle_id_fkey FOREIGN KEY (ckout_vehicle_id)
        REFERENCES public.vehicles (vehicle_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.checkout
    OWNER to postgres;










===================================TABELA CLIENTES===================================================
-- DROP TABLE IF EXISTS public.clients;

CREATE TABLE IF NOT EXISTS public.clients
(
    client_id integer NOT NULL DEFAULT nextval('clients_client_id_seq'::regclass),
    client_name character varying(100) COLLATE pg_catalog."default",
    client_email character varying(50) COLLATE pg_catalog."default",
    client_address character varying(150) COLLATE pg_catalog."default",
    client_type character varying(20) COLLATE pg_catalog."default",
    client_bussines_plan character varying(10) COLLATE pg_catalog."default",
    client_departure_time character varying(10) COLLATE pg_catalog."default",
    client_company_id integer,
    client_phone character varying COLLATE pg_catalog."default",
    client_cep character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT clients_pkey PRIMARY KEY (client_id),
    CONSTRAINT clients_client_company_id_fkey FOREIGN KEY (client_company_id)
        REFERENCES public.companys (company_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.clients
    OWNER to postgres;








===================================TABELA COMPANYS===================================================
-- DROP TABLE IF EXISTS public.companys;

CREATE TABLE IF NOT EXISTS public.companys
(
    company_id integer NOT NULL DEFAULT nextval('companys_company_id_seq'::regclass),
    company_name character varying(120) COLLATE pg_catalog."default",
    company_email character varying(50) COLLATE pg_catalog."default",
    company_slots integer,
    company_phone character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT companys_pkey PRIMARY KEY (company_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.companys
    OWNER to postgres;








===================================TABELA COMPANYS===================================================
-- DROP TABLE IF EXISTS public.movements;

CREATE TABLE IF NOT EXISTS public.movements
(
    mov_id integer NOT NULL DEFAULT nextval('movements_mov_id_seq'::regclass),
    mov_type character varying(10) COLLATE pg_catalog."default",
    mov_client_id integer,
    mov_vehicle_id integer,
    mov_datetime character varying(30) COLLATE pg_catalog."default",
    CONSTRAINT movements_pkey PRIMARY KEY (mov_id),
    CONSTRAINT movements_mov_client_id_fkey FOREIGN KEY (mov_client_id)
        REFERENCES public.clients (client_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT movements_mov_vehicle_id_fkey FOREIGN KEY (mov_vehicle_id)
        REFERENCES public.vehicles (vehicle_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.movements
    OWNER to postgres;








===================================TABELA PARKING===================================================
-- DROP TABLE IF EXISTS public.parking;

CREATE TABLE IF NOT EXISTS public.parking
(
    parking_name character varying(70) COLLATE pg_catalog."default",
    parking_slots integer
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.parking
    OWNER to postgres;








===================================TABELA PARKING_SECTIONS===================================================

-- DROP TABLE IF EXISTS public.parking_sections;

CREATE TABLE IF NOT EXISTS public.parking_sections
(
    prk_sect_id integer NOT NULL DEFAULT nextval('parking_sections_prk_sect_id_seq'::regclass),
    prk_sect_name character varying(30) COLLATE pg_catalog."default",
    prk_sect_slots integer,
    prk_sect_color character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT parking_sections_pkey PRIMARY KEY (prk_sect_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.parking_sections
    OWNER to postgres;










===================================TABELA USERS===================================================
-- DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL DEFAULT nextval('users_user_id_seq'::regclass),
    user_name character varying(80) COLLATE pg_catalog."default",
    user_email character varying(50) COLLATE pg_catalog."default",
    user_function character varying(60) COLLATE pg_catalog."default",
    user_access integer,
    user_password character varying(256) COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (user_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;








===================================TABELA VEHICLES===================================================
-- DROP TABLE IF EXISTS public.vehicles;

CREATE TABLE IF NOT EXISTS public.vehicles
(
    vehicle_id integer NOT NULL DEFAULT nextval('vehicles_vehicle_id_seq'::regclass),
    vehicle_plate character varying(10) COLLATE pg_catalog."default",
    vehicle_model character varying(40) COLLATE pg_catalog."default",
    vehicle_color character varying(20) COLLATE pg_catalog."default",
    vehicle_category character varying(15) COLLATE pg_catalog."default",
    vehicle_departure_time character varying(10) COLLATE pg_catalog."default",
    vehicle_client_id integer,
    vehicle_brand character varying(30) COLLATE pg_catalog."default",
    CONSTRAINT vehicles_pkey PRIMARY KEY (vehicle_id),
    CONSTRAINT vehicles_vehicle_client_id_fkey FOREIGN KEY (vehicle_client_id)
        REFERENCES public.clients (client_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.vehicles
    OWNER to postgres;







+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



******* INSERT USERS *****************
INSERT INTO public.users(
	user_id, user_name, user_email, user_function, user_access, user_password)
	VALUES (?, ?, ?, ?, ?, ?);




******* INSERT VEHICLES *****************
INSERT INTO public.vehicles(
	vehicle_id, vehicle_plate, vehicle_model, vehicle_color, vehicle_category, vehicle_departure_time, vehicle_client_id, vehicle_brand)
	VALUES (?, ?, ?, ?, ?, ?, ?, ?);


******* INSERT PARKING SECTION ******************
INSERT INTO public.parking_sections(
	prk_sect_id, prk_sect_name, prk_sect_slots, prk_sect_color)
	VALUES (?, ?, ?, ?);
